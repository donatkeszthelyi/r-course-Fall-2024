dimnames = list(cocktail_names, ingredient_names))
cocktail_names <- cocktail_data$name
ingredient_names <- unique(all_ingredients$name)
cocktail_ingredient_matrix <- matrix("", nrow = length(cocktail_names), ncol = length(ingredient_names),
dimnames = list(cocktail_names, ingredient_names))
cocktail_names <- unique(cocktail_data$name)
ingredient_names <- unique(all_ingredients$name)
cocktail_ingredient_matrix <- matrix("", nrow = length(cocktail_names), ncol = length(ingredient_names),
dimnames = list(cocktail_names, ingredient_names))
View(cocktail_ingredient_matrix)
cocktail_names <- unique(cocktail_data$name)
ingredient_names <- unique(all_ingredients$ingredients)
cocktail_ingredient_matrix <- matrix("", nrow = length(cocktail_names), ncol = length(ingredient_names),
dimnames = list(cocktail_names, ingredient_names))
View(cocktail_ingredient_matrix)
View(cocktail_clean)
cocktail_names <- unique(cocktail_data$name)
ingredient_names <- unique(all_ingredients$ingredients)
cocktail_ingredient_matrix <- matrix("", nrow = length(cocktail_names), ncol = length(ingredient_names),
dimnames = list(cocktail_names, ingredient_names))
for (cocktail in cocktail_names) {
for (ingredient in ingredient_names) {
if (ingredient %in% cocktail_clean$ingredients[cocktail_clean$name == cocktail]) {
cocktail_ingredient_matrix[cocktail, ingredient] <- "X"
}
}
}
View(cocktail_ingredient_matrix)
cocktail_names <- unique(cocktail_data$name)
ingredient_names <- unique(all_ingredients$ingredients)
cocktail_cheat_sheet <- matrix("", nrow = length(cocktail_names), ncol = length(ingredient_names),
dimnames = list(cocktail_names, ingredient_names))
for (cocktail in cocktail_names) {
for (ingredient in ingredient_names) {
if (ingredient %in% cocktail_clean$ingredients[cocktail_clean$name == cocktail]) {
cocktail_cheat_sheet[cocktail, ingredient] <- "X"
}
}
}
View(cocktail_cheat_sheet)
# Reading the data
cocktail_data <- read_tsv("https://raw.githubusercontent.com/nthun/cocktail-balance/refs/heads/master/cocktail_data.tsv")
print(cocktail_data)
#Cleaning the data, creating separate rows for the ingredients and removing quantities and alcogol concent intications
cocktail_clean <- cocktail_data |>
separate_rows(ingredients, sep = "<br>|<br/>|<b") |>
mutate(ingredients = str_remove_all(ingredients, "\\d+\\s*[^a-zA-Z\\s]*\\s*|\\d+\\.\\d+%\\s*abv|\\b(oz|dashes|parts|cl|ml|abv|drops|dash|drop|bsp)\\b|\\(.*?\\)")) |>
mutate(ingredients = str_trim(ingredients))
print(cocktail_clean)
#Cleaning the data, creating separate rows for the ingredients and removing quantities and alcohol content indicatiors
cocktail_clean <- cocktail_data |>
separate_rows(ingredients, sep = "<br>|<br/>|<b") |>
mutate(ingredients = str_remove_all(ingredients, "\\d+\\s*[^a-zA-Z\\s]*\\s*|\\d+\\.\\d+%\\s*abv|\\b(oz|dashes|parts|cl|ml|abv|drops|dash|drop|bsp)\\b|\\(.*?\\)")) |>
mutate(ingredients = str_trim(ingredients))
print(cocktail_clean)
#Listing all the ingredients in alphabetical order
all_ingredients <- cocktail_clean |>
select(ingredients) |>
arrange(tolower(ingredients))
print(all_ingredients)
#Listing all the ingredients in alphabetical order
all_ingredients <- cocktail_clean |>
select(ingredients) |>
arrange(tolower(ingredients))
unique_ingredients <- all_ingredients |>
distinct()
print(unique_ingredients)
#Creating a dataframe for all the ingredients in alphabetical order
all_ingredients <- cocktail_clean |>
select(ingredients) |>
arrange(tolower(ingredients))
#Creating a dataframe, which includes each ingredient only once
unique_ingredients <- all_ingredients |>
distinct()
print(unique_ingredients)
#Counting the number of unique ingredients
unique_ingredients_count <- unique_ingredients |>
nrow()
print(unique_ingredients_count)
View(ingredient_counts)
ingredient_frequencies <- cocktail_clean |>
count(ingredients) |>
arrange(desc(n))
top_10_frequencies <- ingredient_frequencies |>
distinct(n) |>
slice_head(n = 10) |>
pull(n)
top_ingredients <- sorted_ingredients |>
filter(n %in% top_10_frequencies) |>
arrange(desc(n), ingredients)
View(top_ingredients)
ingredient_frequencies <- cocktail_clean |>
count(ingredients) |>
arrange(desc(n))
top_10_frequencies <- ingredient_frequencies |>
distinct(n) |>
slice_head(n = 10) |>
pull(n)
top_ingredients <- sorted_ingredients |>
filter(n %in% top_10_frequencies) |>
arrange(desc(n), ingredients) |>
rename(frequency = n)
View(top_ingredients)
ingredient_frequencies <- cocktail_clean |>
count(ingredients) |>
arrange(desc(n))
top_10_frequencies <- ingredient_frequencies |>
distinct(n) |>
slice_head(n = 10) |>
pull(n)
top_ingredients <- sorted_ingredients |>
filter(n %in% top_10_frequencies) |>
arrange(desc(n), ingredients) |>
rename(frequency = n, ingredient = ingredients)
View(top_ingredients)
#Dataframe for the frequencies of all the ingredients in descending order
ingredient_frequencies <- cocktail_clean |>
count(ingredients) |>
arrange(desc(n))
#Dataframe for the top 10 distinct frequencies
top_10_frequencies <- ingredient_frequencies |>
distinct(n) |>
slice_head(n = 10) |>
pull(n)
#Dataframe for all the ingredients that have a frequency, which is included in the top 10 frequencies
top_ingredients <- sorted_ingredients |>
filter(n %in% top_10_frequencies) |>
arrange(desc(n), ingredients) |>
rename(frequency = n, ingredient = ingredients)
print(top_ingredients)
#Dataframe for the cocktails with the most ingredients
cocktails_with_most_ingredients <- cocktail_clean |>
count(name) |>
filter(n == max(n)) |>
rename(ingredient_counts = n)
print(cocktails_with_most_ingredients)
#Dataframe for the rare ingredients
rare_ingredients <- ingredient_counts |>
filter(n == 1)
#Counting the number of rare ingredients
rare_ingredient_count <- rare_ingredients |>
nrow()
print(rare_ingredient_count)
#Listing the rare ingredients' names
rare_ingredients_list <- rare_ingredients$ingredients
#Dataframe for the cocktails that have a rare ingredient
cocktails_with_rare_ingredients <- cocktail_clean |>
filter(ingredients %in% rare_ingredients_list) |>
select(name) |>
distinct()
print(cocktails_with_rare_ingredients)
#Dataframe for the cocktails without rare ingredients
cocktails_without_rare_ingredients <- cocktail_clean |>
filter(!name %in% cocktails_with_rare_ingredients$name) |>
select(name) |>
distinct()
print(cocktails_without_rare_ingredients)
#Creating lists for the names of the rows (cocktails) and for the names of the columns (ingredients)
cocktail_names <- unique(cocktail_data$name)
ingredient_names <- unique(all_ingredients$ingredients)
#Creating the empty matrix, with the appropriate rows and columns
cocktail_cheat_sheet <- matrix("", nrow = length(cocktail_names), ncol = length(ingredient_names),
dimnames = list(cocktail_names, ingredient_names))
#Filling the matrix with 'X'-s in the appropriate places
for (cocktail in cocktail_names) {
for (ingredient in ingredient_names) {
if (ingredient %in% cocktail_clean$ingredients[cocktail_clean$name == cocktail]) {
cocktail_cheat_sheet[cocktail, ingredient] <- "X"
}
}
}
print(cocktail_cheat_sheet)
#Creating lists for the names of the rows (cocktails) and for the names of the columns (ingredients)
cocktail_names <- unique(cocktail_data$name)
ingredient_names <- unique(all_ingredients$ingredients)
#Creating the empty matrix, with the appropriate rows and columns
cocktail_cheat_sheet <- matrix("", nrow = length(cocktail_names), ncol = length(ingredient_names),
dimnames = list(cocktail_names, ingredient_names))
#Filling the matrix with 'X'-s in the appropriate places
for (cocktail in cocktail_names) {
for (ingredient in ingredient_names) {
if (ingredient %in% cocktail_clean$ingredients[cocktail_clean$name == cocktail]) {
cocktail_cheat_sheet[cocktail, ingredient] <- "X"
}
}
}
print(head(cocktail_cheat_sheet))
#Creating lists for the names of the rows (cocktails) and for the names of the columns (ingredients)
cocktail_names <- unique(cocktail_data$name)
ingredient_names <- unique(all_ingredients$ingredients)
#Creating the empty matrix, with the appropriate rows and columns
cocktail_cheat_sheet <- matrix("", nrow = length(cocktail_names), ncol = length(ingredient_names),
dimnames = list(cocktail_names, ingredient_names))
#Filling the matrix with 'X'-s in the appropriate places
for (cocktail in cocktail_names) {
for (ingredient in ingredient_names) {
if (ingredient %in% cocktail_clean$ingredients[cocktail_clean$name == cocktail]) {
cocktail_cheat_sheet[cocktail, ingredient] <- "X"
}
}
}
cocktail_cheat_sheet
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Chunk 2
# Reading the data
cocktail_data <- read_tsv("https://raw.githubusercontent.com/nthun/cocktail-balance/refs/heads/master/cocktail_data.tsv")
print(cocktail_data)
# Chunk 3
#Cleaning the data, creating separate rows for the ingredients and removing quantities and alcohol content indicatiors
cocktail_clean <- cocktail_data |>
separate_rows(ingredients, sep = "<br>|<br/>|<b") |>
mutate(ingredients = str_remove_all(ingredients, "\\d+\\s*[^a-zA-Z\\s]*\\s*|\\d+\\.\\d+%\\s*abv|\\b(oz|dashes|parts|cl|ml|abv|drops|dash|drop|bsp)\\b|\\(.*?\\)")) |>
mutate(ingredients = str_trim(ingredients))
print(cocktail_clean)
# Chunk 4
#Creating a dataframe for all the ingredients in alphabetical order
all_ingredients <- cocktail_clean |>
select(ingredients) |>
arrange(tolower(ingredients))
#Creating a dataframe, which includes each ingredient only once
unique_ingredients <- all_ingredients |>
distinct()
print(unique_ingredients)
# Chunk 5
#Counting the number of unique ingredients
unique_ingredients_count <- unique_ingredients |>
nrow()
print(unique_ingredients_count)
# Chunk 6
#Dataframe for the frequencies of all the ingredients in descending order
ingredient_frequencies <- cocktail_clean |>
count(ingredients) |>
arrange(desc(n))
#Dataframe for the top 10 distinct frequencies
top_10_frequencies <- ingredient_frequencies |>
distinct(n) |>
slice_head(n = 10) |>
pull(n)
#Dataframe for all the ingredients that have a frequency, which is included in the top 10 frequencies
top_ingredients <- sorted_ingredients |>
filter(n %in% top_10_frequencies) |>
arrange(desc(n), ingredients) |>
rename(frequency = n, ingredient = ingredients)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Chunk 2
# Reading the data
cocktail_data <- read_tsv("https://raw.githubusercontent.com/nthun/cocktail-balance/refs/heads/master/cocktail_data.tsv")
print(cocktail_data)
# Chunk 3
#Cleaning the data, creating separate rows for the ingredients and removing quantities and alcohol content indicatiors
cocktail_clean <- cocktail_data |>
separate_rows(ingredients, sep = "<br>|<br/>|<b") |>
mutate(ingredients = str_remove_all(ingredients, "\\d+\\s*[^a-zA-Z\\s]*\\s*|\\d+\\.\\d+%\\s*abv|\\b(oz|dashes|parts|cl|ml|abv|drops|dash|drop|bsp)\\b|\\(.*?\\)")) |>
mutate(ingredients = str_trim(ingredients))
print(cocktail_clean)
# Chunk 4
#Creating a dataframe for all the ingredients in alphabetical order
all_ingredients <- cocktail_clean |>
select(ingredients) |>
arrange(tolower(ingredients))
#Creating a dataframe, which includes each ingredient only once
unique_ingredients <- all_ingredients |>
distinct()
print(unique_ingredients)
# Chunk 5
#Counting the number of unique ingredients
unique_ingredients_count <- unique_ingredients |>
nrow()
print(unique_ingredients_count)
# Chunk 6
#Dataframe for the frequencies of all the ingredients in descending order
ingredient_frequencies <- cocktail_clean |>
count(ingredients) |>
arrange(desc(n))
#Dataframe for the top 10 distinct frequencies
top_10_frequencies <- ingredient_frequencies |>
distinct(n) |>
slice_head(n = 10) |>
pull(n)
#Dataframe for all the ingredients that have a frequency, which is included in the top 10 frequencies
top_ingredients <- sorted_ingredients |>
filter(n %in% top_10_frequencies) |>
arrange(desc(n), ingredients) |>
rename(frequency = n, ingredient = ingredients)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Reading the data
cocktail_data <- read_tsv("https://raw.githubusercontent.com/nthun/cocktail-balance/refs/heads/master/cocktail_data.tsv")
print(cocktail_data)
#Cleaning the data, creating separate rows for the ingredients and removing quantities and alcohol content indicatiors
cocktail_clean <- cocktail_data |>
separate_rows(ingredients, sep = "<br>|<br/>|<b") |>
mutate(ingredients = str_remove_all(ingredients, "\\d+\\s*[^a-zA-Z\\s]*\\s*|\\d+\\.\\d+%\\s*abv|\\b(oz|dashes|parts|cl|ml|abv|drops|dash|drop|bsp)\\b|\\(.*?\\)")) |>
mutate(ingredients = str_trim(ingredients))
print(cocktail_clean)
#Creating a dataframe for all the ingredients in alphabetical order
all_ingredients <- cocktail_clean |>
select(ingredients) |>
arrange(tolower(ingredients))
#Creating a dataframe, which includes each ingredient only once
unique_ingredients <- all_ingredients |>
distinct()
print(unique_ingredients)
#Creating a dataframe for all the ingredients in alphabetical order
all_ingredients <- cocktail_clean |>
select(ingredients) |>
arrange(tolower(ingredients))
#Creating a dataframe, which includes each ingredient only once
unique_ingredients <- all_ingredients |>
distinct()
print(unique_ingredients)
#Counting the number of unique ingredients
unique_ingredients_count <- unique_ingredients |>
nrow()
print(unique_ingredients_count)
#Dataframe for the frequencies of all the ingredients in descending order
ingredient_frequencies <- cocktail_clean |>
count(ingredients) |>
arrange(desc(n))
#Dataframe for the top 10 distinct frequencies
top_10_frequencies <- ingredient_frequencies |>
distinct(n) |>
slice_head(n = 10) |>
pull(n)
#Dataframe for all the ingredients that have a frequency, which is included in the top 10 frequencies
top_ingredients <- sorted_ingredients |>
filter(n %in% top_10_frequencies) |>
arrange(desc(n), ingredients) |>
rename(frequency = n, ingredient = ingredients)
#Dataframe for the cocktails with the most ingredients
cocktails_with_most_ingredients <- cocktail_clean |>
count(name) |>
filter(n == max(n)) |>
rename(ingredient_counts = n)
print(cocktails_with_most_ingredients)
#Dataframe for the rare ingredients
rare_ingredients <- ingredient_counts |>
filter(n == 1)
#Listing the rare ingredients' names
rare_ingredients_list <- rare_ingredients$ingredients
#Dataframe for the cocktails without rare ingredients
cocktails_without_rare_ingredients <- cocktail_clean |>
filter(!name %in% cocktails_with_rare_ingredients$name) |>
select(name) |>
distinct()
#Creating lists for the names of the rows (cocktails) and for the names of the columns (ingredients)
cocktail_names <- unique(cocktail_data$name)
ingredient_names <- unique(all_ingredients$ingredients)
#Creating the empty matrix, with the appropriate rows and columns
cocktail_cheat_sheet <- matrix("", nrow = length(cocktail_names), ncol = length(ingredient_names),
dimnames = list(cocktail_names, ingredient_names))
#Filling the matrix with 'X'-s in the appropriate places
for (cocktail in cocktail_names) {
for (ingredient in ingredient_names) {
if (ingredient %in% cocktail_clean$ingredients[cocktail_clean$name == cocktail]) {
cocktail_cheat_sheet[cocktail, ingredient] <- "X"
}
}
}
print(cocktail_cheat_sheet)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Reading the data
cocktail_data <- read_tsv("https://raw.githubusercontent.com/nthun/cocktail-balance/refs/heads/master/cocktail_data.tsv")
print(cocktail_data)
#Cleaning the data, creating separate rows for the ingredients and removing quantities and alcohol content indicators
cocktail_clean <- cocktail_data |>
separate_rows(ingredients, sep = "<br>|<br/>|<b") |>
mutate(ingredients = str_remove_all(ingredients, "\\d+\\s*[^a-zA-Z\\s]*\\s*|\\d+\\.\\d+%\\s*abv|\\b(oz|dashes|parts|cl|ml|abv|drops|dash|drop|bsp)\\b|\\(.*?\\)")) |>
mutate(ingredients = str_trim(ingredients))
print(cocktail_clean)
#Creating a dataframe for all the ingredients in alphabetical order
all_ingredients <- cocktail_clean |>
select(ingredients) |>
arrange(tolower(ingredients))
#Creating a dataframe, which includes each ingredient only once
unique_ingredients <- all_ingredients |>
distinct()
print(unique_ingredients)
#Counting the number of unique ingredients
unique_ingredients_count <- unique_ingredients |>
nrow()
print(unique_ingredients_count)
#Dataframe for the frequencies of all the ingredients in descending order
ingredient_frequencies <- cocktail_clean |>
count(ingredients) |>
arrange(desc(n))
#Dataframe for the top 10 distinct frequencies
top_10_frequencies <- ingredient_frequencies |>
distinct(n) |>
slice_head(n = 10) |>
pull(n)
#Dataframe for all the ingredients that have a frequency, which is included in the top 10 frequencies
top_ingredients <- sorted_ingredients |>
filter(n %in% top_10_frequencies) |>
arrange(desc(n), ingredients) |>
rename(frequency = n, ingredient = ingredients)
#Dataframe for the cocktails with the most ingredients
cocktails_with_most_ingredients <- cocktail_clean |>
count(name) |>
filter(n == max(n)) |>
rename(ingredient_counts = n)
print(cocktails_with_most_ingredients)
#Dataframe for the rare ingredients
rare_ingredients <- ingredient_counts |>
filter(n == 1)
#Listing the rare ingredients' names
rare_ingredients_list <- rare_ingredients$ingredients
#Dataframe for the cocktails without rare ingredients
cocktails_without_rare_ingredients <- cocktail_clean |>
filter(!name %in% cocktails_with_rare_ingredients$name) |>
select(name) |>
distinct()
#Creating lists for the names of the rows (cocktails) and for the names of the columns (ingredients)
cocktail_names <- unique(cocktail_data$name)
ingredient_names <- unique(all_ingredients$ingredients)
#Creating the empty matrix, with the appropriate rows and columns
cocktail_cheat_sheet <- matrix("", nrow = length(cocktail_names), ncol = length(ingredient_names),
dimnames = list(cocktail_names, ingredient_names))
#Filling the matrix with 'X'-s in the appropriate places
for (cocktail in cocktail_names) {
for (ingredient in ingredient_names) {
if (ingredient %in% cocktail_clean$ingredients[cocktail_clean$name == cocktail]) {
cocktail_cheat_sheet[cocktail, ingredient] <- "X"
}
}
}
print(cocktail_cheat_sheet)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Reading the data
cocktail_data <- read_tsv("https://raw.githubusercontent.com/nthun/cocktail-balance/refs/heads/master/cocktail_data.tsv")
print(cocktail_data)
#Cleaning the data, creating separate rows for the ingredients and removing quantities and alcohol content indicators
cocktail_clean <- cocktail_data |>
separate_rows(ingredients, sep = "<br>|<br/>|<b") |>
mutate(ingredients = str_remove_all(ingredients, "\\d+\\s*[^a-zA-Z\\s]*\\s*|\\d+\\.\\d+%\\s*abv|\\b(oz|dashes|parts|cl|ml|abv|drops|dash|drop|bsp)\\b|\\(.*?\\)")) |>
mutate(ingredients = str_trim(ingredients))
print(cocktail_clean)
#Creating a dataframe for all the ingredients in alphabetical order
all_ingredients <- cocktail_clean |>
select(ingredients) |>
arrange(tolower(ingredients))
#Creating a dataframe, which includes each ingredient only once
unique_ingredients <- all_ingredients |>
distinct()
print(unique_ingredients)
#Counting the number of unique ingredients
unique_ingredients_count <- unique_ingredients |>
nrow()
print(unique_ingredients_count)
#Dataframe for the frequencies of all the ingredients in descending order
ingredient_frequencies <- cocktail_clean |>
count(ingredients) |>
arrange(desc(n))
#Dataframe for the top 10 distinct frequencies
top_10_frequencies <- ingredient_frequencies |>
distinct(n) |>
slice_head(n = 10) |>
pull(n)
#Dataframe for all the ingredients that have a frequency, which is included in the top 10 frequencies
top_ingredients <- sorted_ingredients |>
filter(n %in% top_10_frequencies) |>
arrange(desc(n), ingredients) |>
rename(frequency = n, ingredient = ingredients)
#Dataframe for the cocktails with the most ingredients
cocktails_with_most_ingredients <- cocktail_clean |>
count(name) |>
filter(n == max(n)) |>
rename(ingredient_counts = n)
print(cocktails_with_most_ingredients)
#Dataframe for the rare ingredients
rare_ingredients <- ingredient_counts |>
filter(n == 1)
#Listing the rare ingredients' names
rare_ingredients_list <- rare_ingredients$ingredients
#Dataframe for the cocktails without rare ingredients
cocktails_without_rare_ingredients <- cocktail_clean |>
filter(!name %in% cocktails_with_rare_ingredients$name) |>
select(name) |>
distinct()
#Creating lists for the names of the rows (cocktails) and for the names of the columns (ingredients)
cocktail_names <- unique(cocktail_data$name)
ingredient_names <- unique(all_ingredients$ingredients)
#Creating the empty matrix, with the appropriate rows and columns
cocktail_cheat_sheet <- matrix("", nrow = length(cocktail_names), ncol = length(ingredient_names),
dimnames = list(cocktail_names, ingredient_names))
#Filling the matrix with 'X'-s in the appropriate places
for (cocktail in cocktail_names) {
for (ingredient in ingredient_names) {
if (ingredient %in% cocktail_clean$ingredients[cocktail_clean$name == cocktail]) {
cocktail_cheat_sheet[cocktail, ingredient] <- "X"
}
}
}
print(cocktail_cheat_sheet)
View(all_ingredients)
View(cocktail_cheat_sheet)
View(cocktail_clean)
View(cocktail_data)
View(cocktails_with_most_ingredients)
View(ingredient_frequencies)
View(unique_ingredients)
